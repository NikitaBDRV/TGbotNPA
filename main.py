from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from parser import get_documents_for_days, get_failed_sources
import time

TOKEN = "7900129440:AAGixMJlvnjciet40CnlrYVuDHFSqOfLnrQ"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, –ù–∏–∫–∏—Ç–∞! –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã üöó")

async def test(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")

async def send_docs(update: Update, context: ContextTypes.DEFAULT_TYPE, days: int):
    status_msg = await update.message.reply_text("üü° –ò—â—É –¥–æ–∫—É–º–µ–Ω—Ç—ã...")
    start_time = time.time()

    docs = get_documents_for_days(days)
    elapsed_time = time.time() - start_time
    elapsed_str = f"{elapsed_time:.1f} —Å–µ–∫"

    failed = get_failed_sources()
    if failed:
        fail_msg = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫:\n" + "\n".join(f"- {src}" for src in failed)
        await update.message.reply_text(fail_msg)

    if not docs:
        await status_msg.edit_text(f"‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–Ω—è–ª–∞ {elapsed_str}.")
        return

    await status_msg.edit_text(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(docs)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∑–∞ {elapsed_str}. –û—Ç–ø—Ä–∞–≤–ª—è—é:")

    for doc in docs:
        msg = (
            f"üìÖ {doc['date']}\n"
            f"üìù {doc['title']}\n"
            f"üåê –ò—Å—Ç–æ—á–Ω–∏–∫: {doc['source']}\n"
            f"üè∑Ô∏è –¢–µ–º—ã: {', '.join(doc['topics'])}\n"
            f"üîó {doc['url']}"
        )
        await update.message.reply_text(msg)

async def today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_docs(update, context, 0)

async def week(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_docs(update, context, 7)

async def twoweeks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_docs(update, context, 14)

async def month(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_docs(update, context, 30)

app = ApplicationBuilder().token(TOKEN).build()

app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("test", test))
app.add_handler(CommandHandler("today", today))
app.add_handler(CommandHandler("week", week))
app.add_handler(CommandHandler("twoweeks", twoweeks))
app.add_handler(CommandHandler("month", month))

print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç –∫–æ–º–∞–Ω–¥—ã...")
app.run_polling()
